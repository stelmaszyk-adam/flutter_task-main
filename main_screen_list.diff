diff --git a/lib/feature/main/main_cubit.dart b/lib/feature/main/main_cubit.dart
new file mode 100644
index 0000000..67795af
--- /dev/null
+++ b/lib/feature/main/main_cubit.dart
@@ -0,0 +1,38 @@
+import 'package:flutter_bloc/flutter_bloc.dart';
+import 'package:flutter/foundation.dart';
+import 'package:freezed_annotation/freezed_annotation.dart';
+import 'package:injectable/injectable.dart';
+import 'package:netguru_flutter_template/service/mock_api_service.dart';
+
+@LazySingleton()
+class MainCubit extends Cubit<MainState> {
+  MockApiService mockApiService;
+
+  MainCubit(this.mockApiService) : super(Init());
+
+  void fetchListItems() async {
+    emit(Loading());
+    (await mockApiService.getItems()).fold(
+      (error) => emit(Error(error)),
+      (list) => emit(Fetched(list)),
+    );
+  }
+}
+
+class MainState {}
+
+class Init extends MainState {}
+
+class Loading extends MainState {}
+
+class Fetched extends MainState {
+  List<String> list;
+
+  Fetched(this.list);
+}
+
+class Error extends MainState {
+  Exception error;
+
+  Error(this.error);
+}
diff --git a/lib/feature/main/main_screen.dart b/lib/feature/main/main_screen.dart
index 5e0056d..7e197e0 100644
--- a/lib/feature/main/main_screen.dart
+++ b/lib/feature/main/main_screen.dart
@@ -1,22 +1,88 @@
 import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
+import 'package:flutter_bloc/flutter_bloc.dart';
 import 'package:netguru_flutter_template/app/s.dart';
+import 'package:netguru_flutter_template/feature/main/main_cubit.dart';
+import 'package:netguru_flutter_template/injection/injection.dart';
+import 'package:netguru_flutter_template/widget/custom_loading/custom_loading.dart';
+import 'package:netguru_flutter_template/values/app_theme.dart';
 
-class MainScreen extends StatelessWidget {
+class MainScreenRoute extends MaterialPageRoute<bool> {
+  MainScreenRoute() : super(builder: (_) => MainScreen());
+}
+
+class MainScreen extends StatefulWidget {
   @override
-  Widget build(BuildContext context) => Scaffold(
-        appBar: AppBar(title: Text(S.of(context).appName)),
-        body: Center(
-          child: Column(
-            mainAxisSize: MainAxisSize.min,
-            children: [
-              Text('Hello World!'),
-            ],
-          ),
-        ),
-      );
+  _MainScreenState createState() => _MainScreenState();
 }
 
-class MainScreenRoute extends MaterialPageRoute<bool> {
-  MainScreenRoute() : super(builder: (_) => MainScreen());
+class _MainScreenState extends State<MainScreen> {
+  MainCubit? mainCubit;
+
+  bool isLoading = false;
+
+  @override
+  void initState() {
+    mainCubit = getIt.get<MainCubit>();
+    mainCubit?.fetchListItems();
+    super.initState();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return BlocProvider<MainCubit>(
+      create: (context) => mainCubit!,
+      child: BlocConsumer<MainCubit, MainState>(
+        listener: (BuildContext context, state) {
+          setState(() {
+            isLoading = state is Loading;
+          });
+        },
+        builder: (BuildContext context, state) => Scaffold(
+          appBar: AppBar(
+            title: Text(S.of(context).appName),
+            backgroundColor: context.primaryColor(),
+          ),
+          body: Center(
+            child: Stack(
+              children: [
+                state is Loading ? CustomLoading() : SizedBox(),
+                state is Error ? Text(state.error.toString()) : SizedBox(),
+                if (state is Fetched)
+                  ListView(
+                      children: state.list.map(
+                    (s) {
+                      if (state.list.indexOf(s) % 2 == 0)
+                        s = 'I dont like even numbers';
+                      return Card(
+                        shape: RoundedRectangleBorder(
+                            borderRadius:
+                                BorderRadius.all(Radius.circular(20))),
+                        child: Container(
+                          color: Colors.green,
+                          child: Center(
+                            child: Padding(
+                              padding: EdgeInsets.all(8.0),
+                              child: Row(
+                                children: [
+                                  Image.asset(
+                                    'assets/images/splash_image.png',
+                                    height: 50,
+                                  ),
+                                  Text(s),
+                                ],
+                              ),
+                            ),
+                          ),
+                        ),
+                      );
+                    },
+                  ).toList()),
+              ],
+            ),
+          ),
+        ),
+      ),
+    );
+  }
 }
diff --git a/lib/injection/injection.config.dart b/lib/injection/injection.config.dart
index 439f601..8a6c9e7 100644
--- a/lib/injection/injection.config.dart
+++ b/lib/injection/injection.config.dart
@@ -7,8 +7,10 @@
 import 'package:get_it/get_it.dart' as _i1;
 import 'package:injectable/injectable.dart' as _i2;
 
-import '../app/routing/compass.dart' as _i4;
-import '../feature/splash/splash_bloc.dart'
+import '../app/routing/compass.dart' as _i5;
+import '../feature/main/main_cubit.dart' as _i6;
+import '../feature/splash/splash_bloc.dart' as _i4;
+import '../service/mock_api_service.dart'
     as _i3; // ignore_for_file: unnecessary_lambdas
 
 // ignore_for_file: lines_longer_than_80_chars
@@ -16,7 +18,10 @@ import '../feature/splash/splash_bloc.dart'
 _i1.GetIt $initGetIt(_i1.GetIt get,
     {String? environment, _i2.EnvironmentFilter? environmentFilter}) {
   final gh = _i2.GetItHelper(get, environment, environmentFilter);
-  gh.factory<_i3.SplashCubit>(() => _i3.SplashCubit(get<_i4.Compass>()));
-  gh.singleton<_i4.Compass>(_i4.CompassImpl());
+  gh.lazySingleton<_i3.MockApiService>(() => _i3.MockApiService());
+  gh.factory<_i4.SplashCubit>(() => _i4.SplashCubit(get<_i5.Compass>()));
+  gh.lazySingleton<_i6.MainCubit>(
+      () => _i6.MainCubit(get<_i3.MockApiService>()));
+  gh.singleton<_i5.Compass>(_i5.CompassImpl());
   return get;
 }
diff --git a/lib/service/mock_api_service.dart b/lib/service/mock_api_service.dart
new file mode 100644
index 0000000..3e7178f
--- /dev/null
+++ b/lib/service/mock_api_service.dart
@@ -0,0 +1,19 @@
+import 'dart:math';
+
+import 'package:dartz/dartz.dart';
+import 'package:injectable/injectable.dart';
+
+@LazySingleton()
+class MockApiService {
+
+  List<String> get items => [for (int i = 0; i < 9999999; i++) 'My List Item nr $i'];
+
+  Future<Either<Exception, List<String>>> getItems() async {
+    await Future.delayed(Duration(seconds: 1));
+    var showError = Random().nextBool();
+    if (showError) {
+      return left(Exception('Something went wrong ¯\_(ツ)_/¯'));
+    } else
+      return right(items);
+  }
+}
diff --git a/pubspec.lock b/pubspec.lock
index 1463bc6..75efcdc 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -204,6 +204,13 @@ packages:
       url: "https://pub.dartlang.org"
     source: hosted
     version: "1.3.14"
+  dartz:
+    dependency: "direct main"
+    description:
+      name: dartz
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.10.0-nullsafety.1"
   dio:
     dependency: "direct main"
     description:
diff --git a/pubspec.yaml b/pubspec.yaml
index f1ca4f3..53a8cc8 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -21,6 +21,7 @@ dependencies:
     sdk: flutter
   flutter_localizations:
     sdk: flutter
+  dartz: 0.10.0-nullsafety.1
   intl: 0.17.0
   dio: ^4.0.0-beta5
   dio_cookie_manager: ^2.0.0-beta1
